<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AggregateSource</name>
    </assembly>
    <members>
        <member name="T:AggregateSource.Aggregate">
            <summary>
            Base class for tracking aggregate meta data and its <see cref="T:AggregateSource.AggregateRootEntity"/>.
            </summary>
        </member>
        <member name="M:AggregateSource.Aggregate.#ctor(System.String,System.Int32,AggregateSource.IAggregateRootEntity)">
            <summary>
            Initializes a new instance of the <see cref="T:AggregateSource.Aggregate"/> class.
            </summary>
            <param name="identifier">The aggregate identifier.</param>
            <param name="expectedVersion">The expected aggregate version.</param>
            <param name="root">The aggregate root entity.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="identifier"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="root"/> is null.</exception>
        </member>
        <member name="P:AggregateSource.Aggregate.Identifier">
            <summary>
            Gets the aggregate identifier.
            </summary>
            <value>
            The aggregate identifier.
            </value>
        </member>
        <member name="P:AggregateSource.Aggregate.ExpectedVersion">
            <summary>
            Gets the aggregate version.
            </summary>
        </member>
        <member name="P:AggregateSource.Aggregate.Root">
            <summary>
            Gets the aggregate root entity.
            </summary>
            <value>
            The aggregate root entity.
            </value>
        </member>
        <member name="T:AggregateSource.AggregateNotFoundException">
            <summary>
            Exception that tells callers an aggregate was not found.
            </summary>
        </member>
        <member name="T:AggregateSource.AggregateSourceException">
            <summary>
            Marker exception for this library from which all its exceptions derive.
            </summary>
        </member>
        <member name="M:AggregateSource.AggregateSourceException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AggregateSource.AggregateSourceException"/> class.
            </summary>
        </member>
        <member name="M:AggregateSource.AggregateSourceException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AggregateSource.AggregateSourceException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:AggregateSource.AggregateSourceException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:AggregateSource.AggregateSourceException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:AggregateSource.AggregateSourceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:AggregateSource.AggregateSourceException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:AggregateSource.AggregateNotFoundException.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:AggregateSource.AggregateNotFoundException"/> class.
            </summary>
            <param name="identifier">The aggregate identifier.</param>
            <param name="type">Type of the aggregate root entity.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="type"/> is null.</exception>
        </member>
        <member name="M:AggregateSource.AggregateNotFoundException.#ctor(System.String,System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AggregateSource.AggregateNotFoundException"/> class.
            </summary>
            <param name="identifier">The aggregate identifier.</param>
            <param name="type">Type of the aggregate root entity.</param>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="type"/> is null.</exception>
        </member>
        <member name="M:AggregateSource.AggregateNotFoundException.#ctor(System.String,System.Type,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:AggregateSource.AggregateNotFoundException"/> class.
            </summary>
            <param name="identifier">The aggregate identifier.</param>
            <param name="type">Type of the aggregate root entity.</param>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="type"/> is null.</exception>
        </member>
        <member name="M:AggregateSource.AggregateNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:AggregateSource.AggregateNotFoundException"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:AggregateSource.AggregateNotFoundException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <PermissionSet>
              <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
              <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter" />
              </PermissionSet>
        </member>
        <member name="P:AggregateSource.AggregateNotFoundException.Identifier">
            <summary>
            Gets the aggregate id.
            </summary>
            <value>
            The aggregate id.
            </value>
        </member>
        <member name="P:AggregateSource.AggregateNotFoundException.Type">
            <summary>
            Gets the type of the aggregate root entity.
            </summary>
            <value>
            The type of the aggregate root entity.
            </value>
        </member>
        <member name="T:AggregateSource.AggregateRootEntity">
            <summary>
            Base class for aggregate root entities that need some basic infrastructure for tracking state changes.
            </summary>
        </member>
        <member name="T:AggregateSource.IAggregateRootEntity">
            <summary>
            Aggregate root entity marker interface.
            </summary>
        </member>
        <member name="T:AggregateSource.IAggregateInitializer">
            <summary>
            Initializes an aggregate.
            </summary>
        </member>
        <member name="M:AggregateSource.IAggregateInitializer.Initialize(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Initializes this instance using the specified events.
            </summary>
            <param name="events">The events to initialize with.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="events"/> are null.</exception>
        </member>
        <member name="T:AggregateSource.IAggregateChangeTracker">
            <summary>
            Tracks changes that happen to an aggregate
            </summary>
        </member>
        <member name="M:AggregateSource.IAggregateChangeTracker.HasChanges">
            <summary>
            Determines whether this instance has state changes.
            </summary>
            <returns>
              <c>true</c> if this instance has state changes; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:AggregateSource.IAggregateChangeTracker.GetChanges">
            <summary>
            Gets the state changes applied to this instance.
            </summary>
            <returns>A list of recorded state changes.</returns>
        </member>
        <member name="M:AggregateSource.IAggregateChangeTracker.ClearChanges">
            <summary>
            Clears the state changes.
            </summary>
        </member>
        <member name="M:AggregateSource.AggregateRootEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AggregateSource.AggregateRootEntity"/> class.
            </summary>
        </member>
        <member name="M:AggregateSource.AggregateRootEntity.Register``1(System.Action{``0})">
            <summary>
            Registers the specified handler to be invoked when the specified event is applied.
            </summary>
            <typeparam name="TEvent">The type of the event to register the handler for.</typeparam>
            <param name="handler">The handler.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="handler"/> is null.</exception>
        </member>
        <member name="M:AggregateSource.AggregateRootEntity.Initialize(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Initializes this instance using the specified events.
            </summary>
            <param name="events">The events to initialize with.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="events"/> are null.</exception>
        </member>
        <member name="M:AggregateSource.AggregateRootEntity.Apply(System.Object)">
            <summary>
            Applies the specified event to this instance and invokes the associated state handler.
            </summary>
            <param name="event">The event to apply.</param>
        </member>
        <member name="M:AggregateSource.AggregateRootEntity.HasChanges">
            <summary>
            Determines whether this instance has state changes.
            </summary>
            <returns>
              <c>true</c> if this instance has state changes; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:AggregateSource.AggregateRootEntity.GetChanges">
            <summary>
            Gets the state changes applied to this instance.
            </summary>
            <returns>A list of recorded state changes.</returns>
        </member>
        <member name="M:AggregateSource.AggregateRootEntity.ClearChanges">
            <summary>
            Clears the state changes.
            </summary>
        </member>
        <member name="T:AggregateSource.ConcurrentUnitOfWork">
            <summary>
            Tracks changes of attached aggregates.
            </summary>
        </member>
        <member name="M:AggregateSource.ConcurrentUnitOfWork.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AggregateSource.ConcurrentUnitOfWork"/> class.
            </summary>
        </member>
        <member name="M:AggregateSource.ConcurrentUnitOfWork.Attach(AggregateSource.Aggregate)">
            <summary>
            Attaches the specified aggregate.
            </summary>
            <param name="aggregate">The aggregate.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="aggregate"/> is null.</exception>
        </member>
        <member name="M:AggregateSource.ConcurrentUnitOfWork.TryGet(System.String,AggregateSource.Aggregate@)">
            <summary>
            Attempts to get the <see cref="T:AggregateSource.Aggregate"/> using the specified aggregate identifier.
            </summary>
            <param name="identifier">The aggregate identifier.</param>
            <param name="aggregate">The aggregate if found, otherwise <c>null</c>.</param>
            <returns><c>true</c> if the aggregate was found, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:AggregateSource.ConcurrentUnitOfWork.HasChanges">
            <summary>
            Determines whether this instance has aggregates with state changes.
            </summary>
            <returns>
              <c>true</c> if this instance has aggregates with state changes; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:AggregateSource.ConcurrentUnitOfWork.GetChanges">
            <summary>
            Gets the aggregates with state changes.
            </summary>
            <returns>An enumeration of <see cref="T:AggregateSource.Aggregate"/>.</returns>
        </member>
        <member name="T:AggregateSource.Entity">
            <summary>
            Base class for aggregate entities that need some basic infrastructure for tracking state changes on their aggregate root entity.
            </summary>
        </member>
        <member name="M:AggregateSource.Entity.#ctor(System.Action{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:AggregateSource.Entity"/> class.
            </summary>
            <param name="applier">The event player and recorder.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="applier"/> is null.</exception>
        </member>
        <member name="M:AggregateSource.Entity.Register``1(System.Action{``0})">
            <summary>
            Registers the specified handler to be invoked when the specified event is applied.
            </summary>
            <typeparam name="TEvent">The type of the event to register the handler for.</typeparam>
            <param name="handler">The handler.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="handler"/> is null.</exception>
        </member>
        <member name="M:AggregateSource.Entity.Play(System.Object)">
            <summary>
            Initializes this instance using the specified event.
            </summary>
            <param name="event">The event to initialize with.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="event"/> is null.</exception>
        </member>
        <member name="M:AggregateSource.Entity.Apply(System.Object)">
            <summary>
            Applies the specified event to this instance and invokes the associated state handler.
            </summary>
            <param name="event">The event to apply.</param>
        </member>
        <member name="T:AggregateSource.IAsyncRepository`1">
            <summary>
            Represents an asynchronous, virtual collection of <typeparamref name="TAggregateRoot"/>.
            </summary>
            <typeparam name="TAggregateRoot">The type of the aggregate root in this collection.</typeparam>
        </member>
        <member name="M:AggregateSource.IAsyncRepository`1.GetAsync(System.String)">
            <summary>
            Gets the aggregate root entity associated with the specified aggregate identifier.
            </summary>
            <param name="identifier">The aggregate identifier.</param>
            <returns>An instance of <typeparamref name="TAggregateRoot"/>.</returns>
            <exception cref="T:AggregateSource.AggregateNotFoundException">Thrown when an aggregate is not found.</exception>
        </member>
        <member name="M:AggregateSource.IAsyncRepository`1.GetOptionalAsync(System.String)">
            <summary>
            Attempts to get the aggregate root entity associated with the aggregate identifier.
            </summary>
            <param name="identifier">The aggregate identifier.</param>
            <returns>The found <typeparamref name="TAggregateRoot"/>, or empty if not found.</returns>
        </member>
        <member name="M:AggregateSource.IAsyncRepository`1.Add(System.String,`0)">
            <summary>
            Adds the aggregate root entity to this collection using the specified aggregate identifier.
            </summary>
            <param name="identifier">The aggregate identifier.</param>
            <param name="root">The aggregate root entity.</param>
        </member>
        <member name="T:AggregateSource.IRepository`1">
            <summary>
            Represents a virtual collection of <typeparamref name="TAggregateRoot"/>.
            </summary>
            <typeparam name="TAggregateRoot">The type of the aggregate root in this collection.</typeparam>
        </member>
        <member name="M:AggregateSource.IRepository`1.Get(System.String)">
            <summary>
            Gets the aggregate root entity associated with the specified aggregate identifier.
            </summary>
            <param name="identifier">The aggregate identifier.</param>
            <returns>An instance of <typeparamref name="TAggregateRoot"/>.</returns>
            <exception cref="T:AggregateSource.AggregateNotFoundException">Thrown when an aggregate is not found.</exception>
        </member>
        <member name="M:AggregateSource.IRepository`1.GetOptional(System.String)">
            <summary>
            Attempts to get the aggregate root entity associated with the aggregate identifier.
            </summary>
            <param name="identifier">The aggregate identifier.</param>
            <returns>The found <typeparamref name="TAggregateRoot"/>, or empty if not found.</returns>
        </member>
        <member name="M:AggregateSource.IRepository`1.Add(System.String,`0)">
            <summary>
            Adds the aggregate root entity to this collection using the specified aggregate identifier.
            </summary>
            <param name="identifier">The aggregate identifier.</param>
            <param name="root">The aggregate root entity.</param>
        </member>
        <member name="T:AggregateSource.Optional`1">
            <summary>
            Represents an optional value.
            </summary>
            <typeparam name="T">The type of the optional value.</typeparam>
        </member>
        <member name="F:AggregateSource.Optional`1.Empty">
            <summary>
            The empty instance.
            </summary>
        </member>
        <member name="M:AggregateSource.Optional`1.#ctor(`0)">
            <summary>
            Initializes a new <see cref="T:AggregateSource.Optional`1"/> instance.
            </summary>
            <param name="value">The value to initialize with.</param>
        </member>
        <member name="M:AggregateSource.Optional`1.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AggregateSource.Optional`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:AggregateSource.Optional`1.Equals(AggregateSource.Optional{`0})">
            <summary>
            Determines whether the specified <see cref="T:AggregateSource.Optional`1"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:AggregateSource.Optional`1"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:AggregateSource.Optional`1"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:AggregateSource.Optional`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:AggregateSource.Optional`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="P:AggregateSource.Optional`1.HasValue">
            <summary>
            Gets an indication if this instance has a value.
            </summary>
        </member>
        <member name="P:AggregateSource.Optional`1.Value">
            <summary>
            Gets the value associated with this instance.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when this instance has no value.</exception>
        </member>
        <member name="T:AggregateSource.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:AggregateSource.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:AggregateSource.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:AggregateSource.Properties.Resources.AggregateNotFoundException_DefaultMessage">
            <summary>
              Looks up a localized string similar to The {0} aggregate with identifier {1} could not be found. Please make sure the callsite is indeed passing in an identifier for an {0} aggregate..
            </summary>
        </member>
        <member name="P:AggregateSource.Properties.Resources.Optional_NoValue">
            <summary>
              Looks up a localized string similar to Optional object must have a value..
            </summary>
        </member>
        <member name="T:AggregateSource.UnitOfWork">
            <summary>
            Tracks changes of attached aggregates.
            </summary>
        </member>
        <member name="M:AggregateSource.UnitOfWork.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AggregateSource.UnitOfWork"/> class.
            </summary>
        </member>
        <member name="M:AggregateSource.UnitOfWork.Attach(AggregateSource.Aggregate)">
            <summary>
            Attaches the specified aggregate.
            </summary>
            <param name="aggregate">The aggregate.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="aggregate"/> is null.</exception>
        </member>
        <member name="M:AggregateSource.UnitOfWork.TryGet(System.String,AggregateSource.Aggregate@)">
            <summary>
            Attempts to get the <see cref="T:AggregateSource.Aggregate"/> using the specified aggregate identifier.
            </summary>
            <param name="identifier">The aggregate identifier.</param>
            <param name="aggregate">The aggregate if found, otherwise <c>null</c>.</param>
            <returns><c>true</c> if the aggregate was found, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:AggregateSource.UnitOfWork.HasChanges">
            <summary>
            Determines whether this instance has aggregates with state changes.
            </summary>
            <returns>
              <c>true</c> if this instance has aggregates with state changes; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:AggregateSource.UnitOfWork.GetChanges">
            <summary>
            Gets the aggregates with state changes.
            </summary>
            <returns>An enumeration of <see cref="T:AggregateSource.Aggregate"/>.</returns>
        </member>
    </members>
</doc>
